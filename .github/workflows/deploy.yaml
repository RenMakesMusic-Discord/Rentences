name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - prod

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore  /home/runner/work/Rentences/Rentences.sln

      - name: Build
        run: dotnet build  /home/runner/work/Rentences/Rentences.sln --configuration Release --no-restore

      - name: Publish
        run: dotnet publish  /home/runner/work/Rentences/Rentences.sln --configuration Release --no-build --output ./publish

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ./publish

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ./publish

      - name: Generate appsettings.json
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          DISCORD_SERVER_ID: ${{ secrets.DISCORD_SERVER_ID }}
          DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
        run: |
          cat <<EOF > ./appsettings.json
          {
            "DiscordConfiguration": {
              "Token": "$DISCORD_TOKEN",
              "ServerId": "$DISCORD_SERVER_ID",
              "ChannelId": "$DISCORD_CHANNEL_ID",
              "Status": "Test",
              "WinEmoji": {
                "Contents": "ðŸŽ‰",
                "IsEmoji": true
              },
              "LoseEmoji": {
                "Contents": "ðŸ˜¢",
                "IsEmoji": true
              },
              "CorrectEmoji": {
                "Contents": "âœ…",
                "IsEmoji": true
              }
            }
          }
          EOF

      - name: Deploy to Pterodactyl
        env:
          PTERODACTYL_API_KEY: ${{ secrets.PTERODACTYL_API_KEY }}
          PTERODACTYL_SERVER_ID: ${{ secrets.PTERODACTYL_SERVER_ID }}
          PTERODACTYL_PANEL_URL: ${{ secrets.PTERODACTYL_PANEL_URL }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        run: |
          # Define the environment-specific variables
          if [ "$ENVIRONMENT" == "prod" ]; then
            PTERODACTYL_API_KEY=$PTERODACTYL_API_KEY_PROD
            PTERODACTYL_SERVER_ID=$PTERODACTYL_SERVER_ID_PROD
          else
            PTERODACTYL_API_KEY=$PTERODACTYL_API_KEY_TEST
            PTERODACTYL_SERVER_ID=$PTERODACTYL_SERVER_ID_TEST
          fi

          # Upload the build artifacts to the Pterodactyl server
          curl -X POST "$PTERODACTYL_PANEL_URL/api/client/servers/$PTERODACTYL_SERVER_ID/files/upload" \
            -H "Authorization: Bearer $PTERODACTYL_API_KEY" \
            -F "file=@./publish/*"

          # Upload the generated appsettings.json file
          curl -X POST "$PTERODACTYL_PANEL_URL/api/client/servers/$PTERODACTYL_SERVER_ID/files/upload" \
            -H "Authorization: Bearer $PTERODACTYL_API_KEY" \
            -F "file=@./appsettings.json"

          # Restart the Pterodactyl server to apply the changes
          curl -X POST "$PTERODACTYL_PANEL_URL/api/client/servers/$PTERODACTYL_SERVER_ID/power" \
            -H "Authorization: Bearer $PTERODACTYL_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"signal": "restart"}'

      - name: Clean up
        run: rm ./appsettings.json

